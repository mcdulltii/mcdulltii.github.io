function dropdown() {
    if (document.getElementById('content').style.display == "none") {
        document.getElementById('content').style.display = "block"
        document.getElementById('dropbtn').innerHTML = "Read Less"
    } else {
        document.getElementById('content').style.display = "none"
        document.getElementById('dropbtn').innerHTML = "Read More"
    }
}

document.write('<link rel="stylesheet" href="https://github.githubassets.com/assets/gist-embed-c77408be8058.css">')
document.write('<div id=\"gist108439974\" class=\"gist\">\n    <div class=\"gist-file\" translate=\"no\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-circuitbreaker-md\" class=\"file my-2\">\n      <div id=\"file-circuitbreaker-md-readme\" class=\"Box-body readme blob js-code-block-container p-5 p-xl-6 \">\n    <article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h1 dir=\"auto\"><a id=\"user-content-circuit-breaker\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#circuit-breaker\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"><\/path><\/svg><\/a>Circuit Breaker<\/h1>\n<p dir=\"auto\">Reflective loading of embedded executable. Embedded executable uses opaque predicates, virtualizations and antialias techniques to obfuscate the decoding of a stored string based on 2nd-order Runge-Kutta and time. Rewrite binary to use input/hex instead of time to decode string.<\/p>\n<h3 dir=\"auto\"><a id=\"user-content-download\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#download\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"><\/path><\/svg><\/a><a href=\"https://github.com/mcdulltii/coding/raw/master/CTFSG_RE/CircuitBreaker\">Download<\/a><\/h3>\n<h2 dir=\"auto\"><a id=\"user-content-description-public\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#description-public\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"><\/path><\/svg><\/a>Description (public)<\/h2>\n<div class=\"highlight highlight-source-shell\" dir=\"auto\"><pre>I have signed up <span class=\"pl-k\">for<\/span> a shady beta <span class=\"pl-c1\">test<\/span> regarding a Singaporean made Meme Generator. All they gave was this binary, which generates the same meme every time<span class=\"pl-k\">?<\/span><span class=\"pl-k\">!<\/span> Whenever I exit, the binary goes funky too. (Though it does print something different ever so often, perhaps I can control that<span class=\"pl-k\">?<\/span>)<\/pre><\/div>\n<h2 dir=\"auto\"><a id=\"user-content-solution\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#solution\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"><\/path><\/svg><\/a>Solution<\/h2>\n<p dir=\"auto\">The following solution is run on Linux. Windows srand seeds and extraction of bytes work differently from Linux.<\/p>\n<h3 dir=\"auto\"><a id=\"user-content-introduction\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#introduction\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"><\/path><\/svg><\/a>Introduction<\/h3>\n<p dir=\"auto\">The binary prints a table with a prompt for integer inputs. <code>1<\/code> will print a Circuit Breaker meme, <code>2<\/code> will print that it\'s not implemented.\n<code>3<\/code> will exit the prompt loop, and continue within the main function.<\/p>\n<h3 dir=\"auto\"><a id=\"user-content-stage-1\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#stage-1\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"><\/path><\/svg><\/a>Stage 1<\/h3>\n<p dir=\"auto\">The binary creates a pthread which opens itself, mmaps and xors a region of the opened binary.\nUsing static analysis, the location of the region is shown to be right after a x86_64 4-byte function header.\n(This region can be found at <code>[0x17a1:0x6fdc]<\/code>)<\/p>\n<p dir=\"auto\">The decoding operation involves referencing the mmap-ed region, with a srand seed of 0x7F, and xor-ing it with a rand() call modulo 222.\nAfter decoding, the decoded bytes are further tampered with a normal function call.<\/p>\n<p dir=\"auto\">Looking at the functions in the binary, one should notice that this binary does not perform the printing of the second string after <code>Error!<\/code>\nThe decoded bytes are actually mapped as a new ELF binary, and is executed by jumping along with the original stack.<\/p>\n<h3 dir=\"auto\"><a id=\"user-content-stage-2\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#stage-2\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"><\/path><\/svg><\/a>Stage 2<\/h3>\n<p dir=\"auto\">If the packed executable is extracted correctly, the <code>file<\/code> command on the binary will reveal that it\'s ELF header has been tampered with.\n(Though the following solution will not require dynamic analysis, we can just fix the ELF headers for the sake of it)<\/p>\n<p dir=\"auto\">From the description, it is said to \"control\" the string that the binary prints.\nLooking at the binary, it indeed writes \"Error!\" as well. When the binary is run, the decoded string is only printed after it.<\/p>\n<p dir=\"auto\">So, the function calls after printing \"Error!\" can be inferred to be the decoding functions.\nThere exists <code>int 0x80<\/code> 32bit syscalls, which shows that heaven\'s gate is being used. (time() and write())<\/p>\n<p dir=\"auto\">The time() syscall is called and passed as a variable under the register <code>r12d<\/code> into a decoding function.\nThis function is very difficult to reverse, since the function itself calls many other functions, but we are able to control the input of this function!<\/p>\n<p dir=\"auto\">Instead of passing the value of time() into this decoding function, we can rewrite this binary to store a fixed hex value into the register <code>r12d<\/code>.\nThere are 3 bytes right before the decoding function and right after the printing of \"Error!\", <code>mov edi, r12d<\/code>.\nAs such, to write more bytes for <code>mov r12d, 0x_<\/code> or <code>mov edi, 0x_<\/code>, such that the printing of \"Error!\" won\'t overwrite the value, the printing can just be overwritten.<\/p>\n<\/article>\n  <\/div>\n\n  <\/div>\n<\/div>\n\n      <\/div>\n      <div class=\"gist-meta\">\n        <a href=\"https://gist.github.com/mcdulltii/9b82deff766126e49a19df55326d94be/raw/3d50a0db51879a4839de79da857d5e1ef458e7a8/CircuitBreaker.md\" style=\"float:right\" class=\"Link--inTextBlock\">view raw<\/a>\n        <a href=\"https://gist.github.com/mcdulltii/9b82deff766126e49a19df55326d94be#file-circuitbreaker-md\" class=\"Link--inTextBlock\">\n          CircuitBreaker.md\n        <\/a>\n        hosted with &#10084; by <a class=\"Link--inTextBlock\" href=\"https://github.com\">GitHub<\/a>\n      <\/div>\n    <\/div>\n    <\/div>\n')